#+TITLE: Ryan Jeffrey's Emacs config
#+AUTHOR: Ryan Jeffrey
#+EMAIL: pwishie@gmail.com
#+OPTIONS: num:nil

* Emacs
** init
#+BEGIN_SRC emacs-lisp

(eval-when-compile
    (require 'use-package))

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC
** font and theme
#+BEGIN_SRC emacs-lisp
   
(add-to-list 'default-frame-alist
   '(font . "DejaVu Sans Mono:antialias=true:size=16:style=Regular"))

(add-to-list 'load-path "~/.emacs.d/themes/")

(if (display-graphic-p)
    (load-theme 'aanila t)
  (load-theme 'manoj-dark t))

#+END_SRC
** Ivy-mode
#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "<f5> f") 'counsel-describe-function)
  (global-set-key (kbd "<f5> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f5> l") 'counsel-find-library)
  (global-set-key (kbd "<f5> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f5> u") 'counsel-unicode-char)
  (global-set-key (kbd "s-c g") 'counsel-git)
  (global-set-key (kbd "s-c j") 'counsel-git-grep)
  (global-set-key (kbd "s-c k") 'counsel-ag)
  (global-set-key (kbd "s-x l") 'counsel-locate)
  (global-set-key (kbd "s-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "s-r") 'counsel-minibuffer-history)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp

(put 'upcase-region 'disabled nil)
(electric-pair-mode t)
(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq column-number-mode t)
(display-time-mode 1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(blink-cursor-mode 0)
(set-language-environment "UTF-8")
(setq redisplay-dont-pause t)
#+END_SRC

** Filename-mode associations
#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)) 
(add-to-list 'auto-mode-alist '("\\.fish\\'" . fish-mode))
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

#+END_SRC
** joestar
#+BEGIN_SRC emacs-lisp

  (use-package joestar
  :init
  (progn
     (defvar undo-tree-map
          (let ((map (make-sparse-keymap)))
              ;; remap `undo' and `undo-only' to `undo-tree-undo'
              (define-key map [remap undo] 'undo-tree-undo)
              (define-key map [remap undo-only] 'undo-tree-undo)
              ;; bind standard undo bindings (since these match redo counterparts)
              (define-key map (kbd "C-/") 'undo-tree-undo)
              (define-key map "\C-_" 'undo-tree-undo)
              ;; redo doesn't exist normally, so define our own keybindings
              (define-key map (kbd "C-?") 'undo-tree-redo)
              (define-key map (kbd "M-_") 'undo-tree-redo)
              ;; just in case something has defined `redo'...
              (define-key map [remap redo] 'undo-tree-redo)
              ;; we use "C-x u" for the undo-tree visualizer
              (define-key map (kbd "s-x u") 'undo-tree-visualize)
              ;; bind register commands
              (define-key map (kbd "s-x r u") 'undo-tree-save-state-to-register)
              (define-key map (kbd "s-x r U") 'undo-tree-restore-state-from-register)
              ;; set keymap
          (setq undo-tree-map map))))
  :load-path 
      "~/.emacs.d/joestar/"
  :config
      (joestar-mode t))
(dolist (hook '(prog-mode-hook text-mode-hook help-mode-hook dired-mode-hook))
    (add-hook hook #'joestar-mode))

#+END_SRC
** org
#+BEGIN_SRC emacs-lisp

(use-package org-indent-mode
    :config
    (org-indent-mode t)
    :hook org-mode)

#+END_SRC
* IDE
** company-mode and flycheck 
#+BEGIN_SRC emacs-lisp
             
  (use-package flycheck-mode
         :config
              
              (flycheck-mode t)
              (define-key flycheck-mode-map flycheck-keymap-prefix nil)
              (setq flycheck-keymap-prefix (kbd \"s-s f\"))
              (define-key flycheck-mode-map flycheck-keymap-prefix
                          flycheck-command-map)

         :hook (prog-mode))

       
  (use-package auto-complete
  :config (ac-config-default))

#+END_SRC
** all programming languages
*** comments
#+BEGIN_SRC emacs-lisp

(require 'rebox2)
(rebox-register-template
 75
 999
 '("?*************?"
   "?* box123456 *?"
   "?*************?"))

#+END_SRC
*** todos
#+BEGIN_SRC emacs-lisp

(use-package fic-mode
:config
     (fic-mode t)
:hook prog-mode)

#+END_SRC
** C/C++
*** style and font-lock
#+BEGIN_SRC emacs-lisp

(setq c-default-style "linux"
      c-basic-offset 4)

(require 'modern-cpp-font-lock)
(modern-c++-font-lock-global-mode t)

#+END_SRC
*** rtags
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "/home/ryan/CSProjects/rtags")

(use-package rtags
  :init 
  (set-variable 'rtags-path "/usr/local/bin/")
  :config
  (progn
    (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
    (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))

    (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
    (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
    (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
    (rtags-enable-standard-keybindings)

    (setq rtags-use-ivy t)

    ;; Shutdown rdm when leaving emacs.
    (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
    ))

;; TODO: Has no coloring! How can I get coloring?
(use-package ivy-rtags
  :config
  (progn
    (setq rtags-display-result-backend 'ivy)
    ))

;; Use rtags for auto-completion.
(use-package company-rtags
  :config
  (progn
    (setq rtags-autostart-diagnostics t)
    (rtags-diagnostics)
    (setq rtags-completions-enabled t)
    (push 'company-rtags company-backends)
    ))

;; Live code checking.
(use-package flycheck-rtags
  :config
  (progn
    ;; ensure that we use only rtags checking
    ;; https://github.com/Andersbakken/rtags#optional-1
    (defun setup-flycheck-rtags ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil)
      (rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
      )
    (add-hook 'c-mode-hook #'setup-flycheck-rtags)
    (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
    ))
    
#+END_SRC
** lisp
#+BEGIN_SRC emacs-lisp

(use-package slime
:init
     (setq inferior-lisp-program "/opt/sbcl/bin/sbcl") 
     (setq slime-contribs '(slime-fancy))
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     ;; Replace "sbcl" with the path to your implementation
     (setq inferior-lisp-program "sbcl"))

(setq geiser-active-implementations '(guile))

#+END_SRC
** Misc

#+BEGIN_SRC emacs-lisp

(require 'neotree)                                                                                      ;;
(global-set-key [f8] 'neotree-toggle)

#+END_SRC
** scripts
*** Perl
#+BEGIN_SRC emacs-lisp

(fset 'perl-mode 'cperl-mode)
(setq cperl-indent-level 4)
(setq cperl-extra-newline-before-brace t
      cperl-brace-offset              -2
      cperl-merge-trailing-else        nil)

(add-hook 'perl-mode-hook (lambda ()
                (set (make-local-variable 'rebox-style-loop) '(75 11))
                (set (make-local-variable 'rebox-min-fill-column) 79)
                (rebox-mode 1)))
      
#+END_SRC
*** Ruby
#+BEGIN_SRC emacs-lisp

(add-hook 'ruby-mode-hook 'robe-mode)
(add-hook 'robe-mode-hook 'ac-robe-setup)

#+END_SRC
** golang
#+BEGIN_SRC emacs-lisp

(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))

(when window-system (set-exec-path-from-shell-PATH))

(setenv "GOPATH" "/home/ryan/CSProjects/goproj/")

(add-to-list 'exec-path "/home/ryan/CSProjects/goproj/bin/")
(add-hook 'before-save-hook 'gofmt-before-save)

(defun my-go-mode-hook ()
  ; Call Gofmt before saving                                                    
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding                                                      
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  )
  (add-hook 'go-mode-hook 'my-go-mode-hook)

(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)

(defun my-go-mode-hook ()
  ; Use goimports instead of go-fmt
  (setq gofmt-command "goimports")
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)

#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp

  (require 'rust-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)

  (add-hook 'rust-mode-hook 'cargo-minor-mode)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (use-package racer-mode                                      ;;
  ;; :init                                                        ;;
  ;; (setq racer-cmd "~/.cargo/bin/racer")                        ;;
  ;; (setq racer-rust-src-path "/home/ryan/CSProjects/rust/src/") ;;
  ;;                                                              ;;
  ;;    :config                                                   ;;
  ;;    (racer-mode t)                                            ;;
  ;;    (define-key racer-mode-map (kbd "C-x 5 .") nil)           ;;
  ;;    (define-key racer-mode-map (kbd "C-x 4 .") nil)           ;;
  ;;                                                              ;;
  ;;    :hook                                                     ;;
  ;;    (rust-mode))                                              ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (add-hook 'rust-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'company-mode)

  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

#+END_SRC
** web
#+BEGIN_SRC emacs-lisp

(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 4))) ;; indent 2 spaces.
(setq emmet-self-closing-tag-style "/") ;; default "/"



#+END_SRC
* Text-editor
** spellcheck
#+BEGIN_SRC emacs-lisp

(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
      
      #+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp

(setq linum-relative-backend 'display-line-numbers-mode)
(require 'linum-relative)
(linum-relative-on)

#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp

(defun er-sudo-edit (&optional arg)
  "Edit currently visited file as root With a prefix ARG prompt for a file to visit.  Will also prompt for a file to visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
                         (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

#+END_SRC
** ligatures
#+BEGIN_SRC emacs-lisp

(defun pretty-greek ()
  "Prettify greek symbols."
  (let ((greek '("alpha" "beta" "gamma" "delta" "epsilon" "zeta" "eta" "theta" "iota" "kappa" "lambda" "mu" "nu" "xi" "omicron" "pi" "rho" "sigma_final" "sigma" "tau" "upsilon" "phi" "chi" "psi" "omega")))
    (loop for word in greek
          for code = 97 then (+ 1 code)
          do  (let ((greek-char (make-char 'greek-iso8859-7 code))) 
                (font-lock-add-keywords nil
                                        `((,(concatenate 'string "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[a-zA-Z]")
                                           (0 (progn (decompose-region (match-beginning 2) (match-end 2))
                                                     nil)))))
                (font-lock-add-keywords nil 
                                        `((,(concatenate 'string "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[^a-zA-Z]")
                                           (0 (progn (compose-region (match-beginning 2) (match-end 2)
                                                                     ,greek-char)
                                                     nil)))))))))  (add-hook 'lisp-mode-hook 'pretty-greek)
(add-hook 'emacs-lisp-mode-hook 'pretty-greek)

(defun my/create-basic-ligatures ()
  "Create basic ligatures."
  (prettify-symbols-mode t)
  ;; boolean and math symbols
  (push '(">=" . ?≥) prettify-symbols-alist)
  (push '("<=" . ?≤) prettify-symbols-alist)
  (push '("!=" . ?≠) prettify-symbols-alist)

  (pretty-greek))

(defun my/create-advanced-ligatures ()
  "Create more invasive ligatures."
  (my/create-basic-ligatures)
  (push '("<-" . ?←) prettify-symbols-alist)
  (push '("->" . ?→) prettify-symbols-alist))

(setq backup-directory-alist `(("." . "~/.saves")))


#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp

;; tell emacs not to use the clipboard
;(setq x-select-enable-clipboard nil)

#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp

(setq auto-revert-interval 0.5)

(require 'company-auctex)
(company-auctex-init)

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

(setq auctex-latexmk-inherit-TeX-PDF-mode t)
(require 'auctex-latexmk)
(auctex-latexmk-setup)

#+END_SRC
** highlighting
#+BEGIN_SRC emacs-lisp

   ;; (defface font-lock-control-face 
  ;;  '((t :foreground "#FF0000"))
  ;;    "Font Lock mode face used for function calls."
  ;;    :group 'font-lock-highlighting-faces)

  ;; ;; (font-lock-add-keywords 
  ;; ;;   'c-mode
  ;; ;;   '(("\\<{}\\>"
  ;; ;;      1 'font-lock-control-face)))

  ;; (defun ctr-chars-hl ()
  ;;    font-lock-add-keywords nil
  ;;       '(("[-+*/=<>,;:(){}]" (0 font-lock-control-face))))

  ;; (dolist (hook '(python-mode-hook fortran-mode-hook c-mode-common-hook))
  ;;     (add-hook hook #'ctr-chars-hl))

;; rainbow delimeters
(add-hook 'lisp-mode-hook #'rainbow-delimitets-mode)


#+END_SRC
* emacs-os
** email
#+BEGIN_SRC emacs-lisp

;;; emacs mail config
(require 'org-mime)

(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e/")
(require 'mu4e)

(setq mu4e-maildir (expand-file-name "~/Maildir"))

; get mail
(setq mu4e-get-mail-command "mbsync -a"
  ;; mu4e-html2text-command "w3m -T text/html" ;;using the default mu4e-shr2text
  mu4e-view-prefer-html t
  mu4e-update-interval 180
  mu4e-headers-auto-update t
  mu4e-compose-signature-auto-include nil
  mu4e-compose-format-flowed t)

;; to view selected message in the browser, no signin, just html mail
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

;; every new email composition gets its own frame!
(setq mu4e-compose-in-new-frame nil)

;; don't save message to Sent Messages, IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

(add-hook 'mu4e-view-mode-hook #'visual-line-mode)

;; <tab> to navigate to links, <RET> to open them in browser
(add-hook 'mu4e-view-mode-hook
  (lambda()
;; try to emulate some of the eww key-bindings
(local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
(local-set-key (kbd "<tab>") 'shr-next-link)
(local-set-key (kbd "<backtab>") 'shr-previous-link)))

;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
(add-hook 'mu4e-headers-mode-hook
      (defun my/mu4e-change-headers ()
	(interactive)
	(setq mu4e-headers-fields
	      `((:human-date . 25) ;; alternatively, use :date
		(:flags . 6)
		(:from . 22)
		(:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
		(:size . 7)))))

;; if you use date instead of human-date in the above, use this setting
;; give me ISO(ish) format date-time stamps in the header list
;(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")

;; spell check
(add-hook 'mu4e-compose-mode-hook
    (defun my-do-compose-stuff ()
       "My settings for message composition."
       (visual-line-mode)
       (org-mu4e-compose-org-mode)
           (use-hard-newlines -1)
       (flyspell-mode)))

(require 'smtpmail)

;;rename files when moving
;;NEEDED FOR MBSYNC
(setq mu4e-change-filenames-when-moving t)

;;set up queue for offline email
;;use mu mkdir  ~/Maildir/acc/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode

;;from the info manual
(setq mu4e-attachment-dir  "~/Downloads")

(setq message-kill-buffer-on-exit t)
(setq mu4e-compose-dont-reply-to-self t)

(require 'org-mu4e)

;; convert org mode to HTML automatically
(setq org-mu4e-convert-to-html t)

;;from vxlabs confighttps://duckduckgo.com/?q=arch+smtp&ia=web
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; don't ask when quitting
(setq mu4e-confirm-quit nil)

;; mu4e-context
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy 'always-ask)
(setq mu4e-contexts
  (list
   (make-mu4e-context
    :name "personal" 
    :enter-func (lambda () (mu4e-message "Entering context work"))
    :leave-func (lambda () (mu4e-message "Leaving context work"))
    :match-func (lambda (msg)
		  (when msg
		(mu4e-message-contact-field-matches
		 msg '(:from :to :cc :bcc) "pwishie@gmail.com")))
    :vars '((user-mail-address . "pwishie@gmail.com")
	    (user-full-name . "Ryan")
	    (mu4e-sent-folder . "/pwishie-gmail/[pwishie].Sent Mail") ;
	    (mu4e-drafts-folder . "/pwishie-gmail/[pwishie].drafts")
	    (mu4e-trash-folder . "/pwishie-gmail/[pwishie].Bin")
	    (mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 25, org-mode 9, mu4e 1.0\n"))
	    (mu4e-compose-format-flowed . t)
	    (smtpmail-queue-dir . "~/Maildir/pwishie-gmail/queue/cur")
	    (message-send-mail-function . smtpmail-send-it)
	    (smtpmail-smtp-user . "pwishie")
	    (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
	    (smtpmail-auth-credentials . (expand-file-name "~/.pwishauth.gpg")) ;;;; TODO
	    (smtpmail-default-smtp-server . "smtp.gmail.com")
	    (smtpmail-smtp-server . "smtp.gmail.com")
	    (smtpmail-smtp-service . 587)
	    (smtpmail-debug-info . t)
	    (smtpmail-debug-verbose . t)
	    (mu4e-maildir-shortcuts . ( ("/pwishie-gmail/INBOX"            . ?i)
					("/pwishie-gmail/[pwishie].Sent Mail" . ?s)
					("/pwishie-gmail/[pwishie].Bin"       . ?t)
					("/pwishie-gmail/[pwishie].All Mail"  . ?a)
					("/pwishie-gmail/[pwishie].Starred"   . ?r)
					("/pwishie-gmail/[pwishie].drafts"    . ?d)
					))))
   (make-mu4e-context
    :name "school" 
    :enter-func (lambda () (mu4e-message "Entering context personal"))
    :leave-func (lambda () (mu4e-message "Leaving context personal"))
    :match-func (lambda (msg)
		  (when msg
		(mu4e-message-contact-field-matches
		 msg '(:from :to :cc :bcc) "acc2@gmail.com")))
    :vars '((user-mail-address . "acc2@gmail.com")
	    (user-full-name . "User Account2")
	    (mu4e-sent-folder . "/acc2-gmail/[acc2].Sent Mail")
	    (mu4e-drafts-folder . "/acc2-gmail/[acc2].drafts")
	    (mu4e-trash-folder . "/acc2-gmail/[acc2].Trash")
	    (mu4e-compose-signature . (concat "Informal Signature\n" "Emacs is awesome!\n"))
	    (mu4e-compose-format-flowed . t)
	    (smtpmail-queue-dir . "~/Maildir/acc2-gmail/queue/cur")
	    (message-send-mail-function . smtpmail-send-it)
	    (smtpmail-smtp-user . "acc2")
	    (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
	    (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
	    (smtpmail-default-smtp-server . "smtp.gmail.com")
	    (smtpmail-smtp-server . "smtp.gmail.com")
	    (smtpmail-smtp-service . 587)
	    (smtpmail-debug-info . t)
	    (smtpmail-debug-verbose . t)
	    (mu4e-maildir-shortcuts . ( ("/acc2-gmail/INBOX"            . ?i)
					("/acc2-gmail/[acc2].Sent Mail" . ?s)
					("/acc2-gmail/[acc2].Trash"     . ?t)
					("/acc2-gmail/[acc2].All Mail"  . ?a)
					("/acc2-gmail/[acc2].Starred"   . ?r)
					("/acc2-gmail/[acc2].drafts"    . ?d)
					))))))


#+END_SRC
** rss
#+BEGIN_SRC emacs-lisp

(setq elfeed-db-directory "~/.elrss")

(require 'elfeed)
(global-set-key (kbd "s-x w") 'elfeed)

;; Load elfeed-org
(require 'elfeed-org)

;; Initialize elfeed-org
;; This hooks up elfeed-org to read the configuration when elfeed
;; is started with =M-x elfeed=
(elfeed-org)

;; Optionally specify a number of files containing elfeed
;; configuration. If not set then the location below is used.
;; Note: The customize interface is also supported.
(setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))

#+END_SRC
** pdf
#+BEGIN_SRC emacs-lisp

(pdf-tools-install)

#+END_SRC
** filesystem
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'dired-details)
(setq-default dired-details-hidden-string "[-]")
(dired-details-install)

#+END_SRC
* Misc
** Terminal stuff
#+BEGIN_SRC emacs-lisp

(add-hook 'term-mode-hook
	  (defun my-term-mode-hook ()
	  (setq bidi-paragraph-direction 'left-to-right)))
      (setq-default term-suppress-hard-newline t)

#+END_SRC
*** vterm

#+BEGIN_SRC emacs-lisp

(use-package vterm
:load-path "/home/ryan/CSProjects/emacs-libvterm/"
:config 
    (let (vterm-install)
       (require 'vterm)))

#+END_SRC
** ssh
#+BEGIN_SRC emacs-lisp

 (require 'ssh)
    (add-hook 'ssh-mode-hook
              (lambda ()
                (setq ssh-directory-tracking-mode t)
                (shell-dirtrack-mode t)
                (setq dirtrackp nil)))

#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp

(require 'highlight-indentation)

#+END_SRC
